# Copyright 2020, Rhys Campbell <rhys.james.campbell@googlemail.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# Simple index
- name: Create an index on a collection (check mode)
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
            username: 1
            last_login: -1
        options:
          name: myindex
        state: present
  check_mode: yes
  register: result

- assert:
    that:
    - result is changed
    - result.indexes_created == ["test.rhys.myindex"]

- name: Create an index on a collection
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
            username: 1
            last_login: -1
        options:
          name: myindex
        state: present
  register: result

- assert:
    that:
    - result is changed
    - result.indexes_created == ["test.rhys.myindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myindex" in output.stdout'

- name: Drop the index we just created (check mode)
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: myindex
        state: absent
  check_mode: true
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.myindex"]

- name: Drop the index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: myindex
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.myindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myindex" not in output.stdout'
# EOF Simple index

# Check adding 2 indexes
# Check adding 3 indexes

# UNIQUE
- name: Add a unique index
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
          username: 1
        options:
          name: myuniqueindex
          unique: true
        state: present
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_created == ["test.rhys.myuniqueindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myuniqueindex" in output.stdout'
      - '"unique\" : true," in output.stdout'

- name: Drop the unique index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: myuniqueindex
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.myuniqueindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myuniqueindex" not in output.stdout'
# EOF UNIQUE

# TTL
- name: Add a ttl index
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
          created: 1
        options:
          name: myttlindex
          expireAfterSeconds: 3600
        state: present
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_created == ["test.rhys.myttlindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myttlindex" in output.stdout'
      - '"expireAfterSeconds\" : 3600" in output.stdout'

- name: Drop the ttl index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: myttlindex
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.myttlindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"myttlindex" not in output.stdout'
# EOF TTL

# SPARSE
- name: Add a sparse index
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
          last_login: -1
        options:
          name: mysparseindex
          sparse: true
        state: present
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_created == ["test.rhys.mysparseindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"mysparseindex" in output.stdout'
      - '"sparse\" : true" in output.stdout'

- name: Drop the sparse index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: mysparseindex
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.mysparseindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"mysparseindex" not in output.stdout'
# EOF SPARSE

# PARTIAL
- name: Add a partial index
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        keys:
          last_login: -1
        options:
          name: mypartialindex
          partialFilterExpression:
            rating:
              $gt: 5
        state: present
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_created == ["test.rhys.mypartialindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"mypartialindex" in output.stdout'
      - '"partialFilterExpression" in output.stdout'
      - '"rating\" :" in output.stdout'

- name: Drop the partial index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: mypartialindex
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.mypartialindex"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"mypartialindex" not in output.stdout'
# EOF PARTIAL

# Background. Option ignored from 4.2
- name: Add a index in the background (deprecated)
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: idxbackground
        keys:
          username: -1
        backgroud: true
        state: present
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_created == ["test.rhys.idxbackground"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"idxbackground" in output.stdout'

- name: Drop the background index we just created
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: idxbackground
        state: absent
  register: result

- assert:
    that:
      - result is changed
      - result.indexes_dropped == ["test.rhys.idxbackground"]

- name: Get indexes on collection
  command: mongo  test --authenticationDatabase admin --port 27017 -u {{ mongodb_admin_user }} -p {{ mongodb_admin_password }} --eval "db.rhys.getIndexes();"
  register: output

- debug:
    var: output

- assert:
    that:
      - '"idxbackground" not in output.stdout'

# Module validation tests
- name: Missing database key
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - collection: "rhys"
        options:
          name: idxbackground
        keys:
          username: -1
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "Missing required index key database"'

- name: database key not a string
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database:
          - "notastring"
        collection: "rhys"
        options:
          name: idxbackground
        keys:
          username: -1
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "database key should be str"'

- name: collection key not a string
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection:
          - "rhys"
        options:
          name: idxbackground
        keys:
          username: -1
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "collection key should be str"'

- name: Check when key spec for index is not a dict
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: idxbackground
        keys: "stringisinvalid"
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "keys key should be dict"'

- name: Check when options is not a dict
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options: "invalid"
        keys:
          username: -1
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "options key should be dict"'

- name: Check when "name" key is not in options dict
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          noname: "ihavenoname"
        keys:
          username: -1
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "The options dict must contain a name field"'

- name: Check when state is something other that "absent" or "present"
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: "idx_username"
        keys:
          username: -1
        backgroud: true
        state: invalid
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "state must be one of present or absent"'

- name: Check when state is present and no keys are supplied
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "rhys"
        options:
          name: "idx_username"
        backgroud: true
        state: present
  register: result
  ignore_errors: yes

- assert:
    that:
      - 'result.failed'
      - 'result.msg == "keys must be supplied when state is present"'
# EOF VALIDATION
- name: Check creating 5 index all with multiple options specified
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "indextest"
        options:
          name: "idx_unq_username"
          unique: true
        keys:
          username: -1
        state: present
      - database: "test"
        collection: "indextest"
        options:
          name: "idx_last_login"
          sparse: true
        keys:
          last_login: -1
        state: present
      - database: "test"
        collection: "indextest"
        options:
          name: "myindex"
        keys:
          first_name: 1
          last_name: -1
          city: 1
        state: present
      - database: "test"
        collection: partialtest
        options:
          name: "idx_partialtest"
          partialFilterExpression:
            rating:
              $gt: 5
        keys:
          rating: -1
          title: 1
        state: present
      - database: "test"
        collection: "wideindex"
        options:
          name: "mywideindex"
        keys:
          email: -1
          username: 1
          first_name: 1
          last_name: 1
          dob: -1
          city: 1
          last_login: -1
          review_count: 1
          rating_count: 1
          last_post: -1
        state: present
  register: result

- assert:
    that:
      - "result.changed"
      - "result.indexes_created|length == 5"
      - "result.indexes_dropped|length == 0"

- name: Drop and create a bunch of indexes
  community.mongodb.mongodb_index:
    login_port: 27017
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_database: "admin"
    indexes:
      - database: "test"
        collection: "indextest"
        options:
          name: "idx_unq_username"
        state: absent
      - database: "test"
        collection: "indextest"
        options:
          name: "idx_last_login"
        state: absent
      - database: "test"
        collection: "indextest"
        options:
          name: "myindex"
        state: absent
      - database: "test"
        collection: partialtest
        options:
          name: "idx_partialtest"
        state: absent
      - database: "test"
        collection: "wideindex"
        options:
          name: "mywideindex"
        state: absent
      - database: "newdb"
        collection: "test"
        options:
          name: "idxtest"
          unique: true
        keys:
          username: -1
        state: present
      - database: "newdb"
        collection: "test"
        options:
          name: "idxtest2"
          unique: true
        keys:
          username: -1
          last_login: -1
        state: present
  register: result

- assert:
    that:
      - "result.changed"
      - "result.indexes_created|length == 2"
      - "result.indexes_dropped|length == 5"
