- name: Ensure tests home exists
  file:
    path: '{{ remote_tmp_dir }}/tests'
    state: directory

- include_tasks: mongod_teardown.yml
- include_tasks: mongod_singlenode.yml

- name: Turn on free monitoring (check mode)
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "started"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been started"

- name: Turn on free monitoring
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "started"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been started"
    - monitoring.url is not defined

- name: Turn on free monitoring again - no change
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "started"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already started"
    - monitoring.url is not defined

- name: Turn on free monitoring again with url - no change
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "started"
    return_url: yes
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already started"
    - monitoring.url is defined
    - "'https://www.mongodb.com/docs/manual/administration/free-monitoring/' in monitoring.url"

- name: Turn off free monitoring (check mode)
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "stopped"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been stopped"

- name: Turn off free monitoring
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "stopped"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been stopped"

- name: Turn off free monitoring again - no change
  community.mongodb.mongodb_monitoring:
    login_port: 3001
    state: "stopped"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already stopped"

# Setup auth on mongo instance
- name: Create admin user with module
  community.mongodb.mongodb_user:
    login_port: 3001
    database: admin
    name: '{{ mongodb_admin_user }}'
    password: '{{ mongodb_admin_password }}'
    roles: root
    state: present
  register: mongodb_admin_user_created

- assert:
    that:
    - mongodb_admin_user_created.changed == True

- name: Kill all mongod processes
  command: pkill  -{{ kill_signal }} mongod
  ignore_errors: true

- name: Getting pids for mongod
  register: pids_of_mongod
  community.general.pids:
    name: mongod

- name: Wait for all mongod processes to exit
  wait_for:
    path: /proc/{{ item }}/status
    state: absent
    delay: 3
  with_items: '{{ pids_of_mongod.pids }}'

- set_fact:
    mongod_auth: true

- include_tasks: mongod_singlenode.yml
# EOF Setup auth

# Repeat above tests with auth

- name: Turn on free monitoring (check mode)
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "started"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been started"

- name: Turn on free monitoring
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "started"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been started"
    - monitoring.url is not defined

- name: Turn on free monitoring again - no change
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "started"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already started"
    - monitoring.url is not defined

- name: Turn on free monitoring again with url - no change
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "started"
    return_url: yes
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already started"
    - monitoring.url is defined
    - "'https://www.mongodb.com/docs/manual/administration/free-monitoring/' in monitoring.url"

- name: Turn off free monitoring (check mode)
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "stopped"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been stopped"

- name: Turn off free monitoring
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "stopped"
  check_mode: no
  register: monitoring

- assert:
    that:
    - monitoring.changed
    - monitoring.msg == "Free monitoring has been stopped"

- name: Turn off free monitoring again - no change
  community.mongodb.mongodb_monitoring:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    login_port: 3001
    state: "stopped"
  check_mode: yes
  register: monitoring

- assert:
    that:
    - monitoring.changed == False
    - monitoring.msg == "Free monitoring is already stopped"

- include_tasks: mongod_teardown.yml
