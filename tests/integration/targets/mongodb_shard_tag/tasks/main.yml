- name: Ensure tests home exists
  file:
    path: '{{ remote_tmp_dir }}/tests'
    state: directory

- include_tasks: mongod_teardown.yml

- set_fact:
    current_replicaset: '{{ mongodb_replicaset1 }}'

- set_fact:
    mongodb_nodes:
    - 3001
    - 3002
    - 3003

- include_tasks: mongod_replicaset.yml

- set_fact:
    current_replicaset: '{{ mongodb_replicaset2 }}'

- set_fact:
    mongodb_nodes:
    - 3004
    - 3005
    - 3006

- include_tasks: mongod_replicaset.yml

- name: Launch cfg server
  command: mongod --configsvr --port 4000 --dbpath {{ remote_tmp_dir }}/config --logpath
    {{ remote_tmp_dir }}/config.log --replSet "{{ configsrv_replicaset }}" --fork

- name: Create replicaset1 with module
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: 3001
    login_database: admin
    replica_set: '{{ mongodb_replicaset1 }}'
    members:
    - localhost:3001
    - localhost:3002
    - localhost:3003

- name: Create replicaset2 with module
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: 3004
    login_database: admin
    replica_set: '{{ mongodb_replicaset2 }}'
    members:
    - localhost:3004
    - localhost:3005
    - localhost:3006

- name: Create config srv replicaset with module
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: 4000
    login_database: admin
    replica_set: '{{ configsrv_replicaset }}'
    validate: false
    members:
    - localhost:4000

- name: Get config server replset mongo_output
  #command: mongo admin --port 4000 --eval "rs.status();"
  community.mongodb.mongodb_shell:
    login_port: 4000
    login_database: "admin"
    eval: "rs.status()"
    transform: "raw"
    mongo_cmd: "auto"
  register: cfg_replset_output

- name: Assert that replset is a config server
  assert:
    that:
    - '"configsvr" in cfg_replset_output.transformed_output | string'
    - '"{{ configsrv_replicaset }}" in cfg_replset_output.transformed_output | string'
    #- '''"set" : "{{ configsrv_replicaset }}"'' in cfg_replset_output.transformed_output | string'

- name: Launch mongos
  command: mongos --configdb "{{ configsrv_replicaset }}/localhost:4000" --logpath
    "{{ remote_tmp_dir }}/tests/mongos.log" --port 27017 --fork

#- name: Copy script to host
#  template:
#    src: files/bash/ensure_primary.sh.j2
#    dest: /root/ensure_primary.sh

#- name: Execute script for 3001
#  script: /root/ensure_primary.sh 3001 0
#  when: mongodb_version[0] | int <= 5

#- name: Execute script for 3004
#  script: /root/ensure_primary.sh 3004 0
#  when: mongodb_version[0] | int <= 5

#- name: Ensure is_primary script exists on host
#  copy:
#    src: js/is_primary.js
#    dest: '{{ remote_tmp_dir }}/tests/is_primary.js'

- name: Ensure host reaches primary before proceeding 3001
  #command: mongo admin --port 3001 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    replica_set: '{{ mongodb_replicaset1 }}'
    login_database: "admin"
    login_port: 3001
    interval: 5
    poll: 10


- name: Ensure host reaches primary before proceeding 3004
  #command: mongo admin --port 3004 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    replica_set: '{{ mongodb_replicaset2 }}'
    login_database: "admin"
    login_port: 3004
    interval: 5
    poll: 10

- name: Add shard 1
  community.mongodb.mongodb_shard:
    login_user: admin
    login_password: admin
    shard: '{{ mongodb_replicaset1 }}/localhost:3001'
    state: present

- name: Add shard 2
  community.mongodb.mongodb_shard:
    login_user: admin
    login_password: admin
    shard: '{{ mongodb_replicaset2 }}/localhost:3004'
    state: present

- name: Get replicaset info
  #command: mongo admin --eval "sh.status()" --port 27017
  community.mongodb.mongodb_shell:
    login_port: 27017
    login_database: "admin"
    eval: "sh.status()"
    transform: "raw"
    mongo_cmd: "auto"
  register: mongo_output

- name: Assert shard name is in mongo_output
  assert:
    that:
    - mongo_output.changed == true
    - '''{{ mongodb_replicaset1 }}/localhost:3001,localhost:3002,localhost:3003'' in mongo_output.transformed_output | string'
    - '''{{ mongodb_replicaset2 }}/localhost:3004,localhost:3005,localhost:3006'' in mongo_output.transformed_output | string'
    - '''balancer'' in mongo_output.transformed_output | string'

- name: Assign NYC tag to rs1
  community.mongodb.mongodb_shard_tag:
    name: "NYC"
    shard: "rs1"
    state: "present"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag NYC was assigned to the shard rs1'"

- name: Assign LAX tag to rs2
  community.mongodb.mongodb_shard_tag:
    name: "LAX"
    shard: "rs2"
    state: "present"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag LAX was assigned to the shard rs2'"


- name: Get shard info
  #command: mongo admin --port 27017 -eval "sh.status()"
  community.mongodb.mongodb_shell:
    login_port: 27017
    login_database: "admin"
    eval: "sh.status()"
    transform: "raw"
    mongo_cmd: "auto"
  register: shard_info

- assert:
    that:
      - "'NYC' in shard_info.transformed_output | string"
      - "'LAX' in shard_info.transformed_output | string"

# Now test tag removal
- name: Remove NYC tag from rs1
  community.mongodb.mongodb_shard_tag:
    name: "NYC"
    shard: "rs1"
    state: "absent"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag NYC was removed from the shard rs1'"

- name: Remove LAX tag from rs2
  community.mongodb.mongodb_shard_tag:
    name: "LAX"
    shard: "rs2"
    state: "absent"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag LAX was removed from the shard rs2'"


- name: Get shard info
  #command: mongo admin --port 27017 -eval "sh.status()"
  community.mongodb.mongodb_shell:
    login_port: 27017
    login_database: "admin"
    eval: "sh.status()"
    transform: "raw"
    mongo_cmd: "auto" 
  register: shard_info

- assert:
    that:
      - "'NYC' not in shard_info.transformed_output | string"
      - "'LAX' not in shard_info.transformed_output | string"

- include_tasks: mongod_teardown.yml

- set_fact:
    current_replicaset: '{{ mongodb_replicaset1 }}'

- set_fact:
    mongodb_nodes:
    - 3001
    - 3002
    - 3003

- include_tasks: mongod_replicaset.yml

- set_fact:
    current_replicaset: '{{ mongodb_replicaset2 }}'

- set_fact:
    mongodb_nodes:
    - 3004
    - 3005
    - 3006

- include_tasks: mongod_replicaset.yml

- name: Create replicaset1 with module
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: 3001
    login_database: admin
    replica_set: '{{ mongodb_replicaset1 }}'
    members:
    - localhost:3001
    - localhost:3002
    - localhost:3003

- name: Create replicaset2 with module
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: 3004
    login_database: admin
    replica_set: '{{ mongodb_replicaset2 }}'
    members:
    - localhost:3004
    - localhost:3005
    - localhost:3006

- name: Launch cfg server
  command: mongod --configsvr --port 4000 --dbpath {{ remote_tmp_dir }}/config --logpath
    {{ remote_tmp_dir }}/config.log --replSet "{{ configsrv_replicaset }}" --fork

- name: Create config srv replicaset with module
  community.mongodb.mongodb_replicaset:
    login_port: 4000
    login_database: admin
    replica_set: '{{ configsrv_replicaset }}'
    validate: false
    members:
    - localhost:4000

#- name: Execute script for 3001
#  script: /root/ensure_primary.sh 3001 0
#  when: mongodb_version[0] | int <= 5

#- name: Execute script for 3004
#  script: /root/ensure_primary.sh 3004 0
#  when: mongodb_version[0] | int <= 5

- name: Ensure host reaches primary before proceeding 3001
  #command: mongo admin --port 3001 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    replica_set: "{{ mongodb_replicaset1 }}"
    login_port: 3001
    interval: 5
    poll: 10

- name: Ensure host reaches primary before proceeding 3004
  #command: mongo admin --port 3004 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    replica_set: "{{ mongodb_replicaset2 }}"
    login_port: 3004
    interval: 5
    poll: 10

- name: Ensure host reaches primary before proceeding 4000
  #command: mongo admin --port 4000 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    replica_set: "{{ configsrv_replicaset }}"
    login_port: 4000
    interval: 5
    poll: 10

- name:  admin user to each shard inc config rs
  community.mongodb.mongodb_user:
    login_host: localhost
    login_port: '{{ item.port }}'
    replica_set: '{{ item.rs }}'
    database: admin
    name: '{{ mongodb_admin_user }}'
    password: '{{ mongodb_admin_password }}'
    roles:
    - root
    state: present
  register: mongo_admin_user
  with_items:
  - port: 3001
    rs: '{{ mongodb_replicaset1 }}'
  - port: 3004
    rs: '{{ mongodb_replicaset2 }}'
  - port: 4000
    rs: '{{ configsrv_replicaset }}'
  when: test_mongo_auth == True

- name: Murder all mongod processes
  shell: pkill -{{ kill_signal }} mongod || true;

- name: Getting pids for mongod
  register: pids_of_mongod
  community.general.pids:
    name: mongod

- name: Wait for all mongod processes to exit
  wait_for:
    path: /proc/{{ item }}/status
    state: absent
  with_items: '{{ pids_of_mongod.pids }}'

- set_fact:
    current_replicaset: '{{ mongodb_replicaset1 }}'

- set_fact:
    mongodb_nodes:
    - 3001
    - 3002
    - 3003

- set_fact:
    mongod_auth: true

- include_tasks: mongod_replicaset.yml

- set_fact:
    current_replicaset: '{{ mongodb_replicaset2 }}'

- set_fact:
    mongodb_nodes:
    - 3004
    - 3005
    - 3006

- set_fact:
    mongod_auth: true

- include_tasks: mongod_replicaset.yml

- name: Launch cfg server with auth
  command: mongod --configsvr --port 4000 --dbpath {{ remote_tmp_dir }}/config --logpath
    {{ remote_tmp_dir }}/config.log --replSet "{{ configsrv_replicaset }}" --fork --auth --keyFile {{ remote_tmp_dir }}/my.key

- name: Ensure host reaches primary before proceeding 3001
  #command: mongo admin --port 3001 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    replica_set: "{{ mongodb_replicaset1 }}"
    login_port: 3001
    interval: 5
    poll: 10

- name: Ensure host reaches primary before proceeding 3004
  #command: mongo admin --port 3004 "{{ remote_tmp_dir }}/tests/is_primary.js"
  community.mongodb.mongodb_status:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    replica_set: "{{ mongodb_replicaset2 }}"
    login_port: 3004
    interval: 5
    poll: 10

- name: Launch mongos
  command: mongos --configdb "{{ configsrv_replicaset }}/localhost:4000" --logpath
    "{{ remote_tmp_dir }}/mongos.log" --port 27017 --fork --keyFile {{ remote_tmp_dir }}/my.key

- name: Wait for mongos to become active
  wait_for:
    host: localhost
    port: 4000
    delay: 1

- name: Add shard 1
  community.mongodb.mongodb_shard:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    shard: '{{ mongodb_replicaset1 }}/localhost:3001'
    state: present

- name: Add shard 2 - First
  community.mongodb.mongodb_shard:
    login_user: '{{ mongodb_admin_user }}'
    login_password: '{{ mongodb_admin_password }}'
    shard: '{{ mongodb_replicaset2 }}/localhost:3004'
    state: present
  register: myshard

- assert:
    that:
      - myshard.changed == True

# Tests with auth
- name: Assign NYC tag to rs1
  community.mongodb.mongodb_shard_tag:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    name: "NYC"
    shard: "rs1"
    state: "present"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag NYC was assigned to the shard rs1'"

- name: Assign LAX tag to rs2
  community.mongodb.mongodb_shard_tag:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    name: "LAX"
    shard: "rs2"
    state: "present"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag LAX was assigned to the shard rs2'"

- name: Get shard info
  #command: mongo admin --port 27017 -u "{{ mongodb_admin_user }}" -p "{{ mongodb_admin_password }}" -eval "sh.status()"
  community.mongodb.mongodb_shell:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"  
    login_port: 27017
    login_database: "admin"
    eval: "sh.status()"
    transform: "raw"
    mongo_cmd: "auto" 
  register: shard_info

- assert:
    that:
      - "'NYC' in shard_info.transformed_output | string"
      - "'LAX' in shard_info.transformed_output | string"

# Now test tag removal
- name: Remove NYC tag from rs1
  community.mongodb.mongodb_shard_tag:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    name: "NYC"
    shard: "rs1"
    state: "absent"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag NYC was removed from the shard rs1'"

- name: Remove LAX tag from rs2
  community.mongodb.mongodb_shard_tag:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"
    name: "LAX"
    shard: "rs2"
    state: "absent"
  register: tag

- assert:
    that:
      - "tag.changed == True"
      - "tag.msg == 'The tag LAX was removed from the shard rs2'"

- name: Get shard info
  #command: mongo admin --port 27017 -u "{{ mongodb_admin_user }}" -p "{{ mongodb_admin_password }}" -eval "sh.status()"
  community.mongodb.mongodb_shell:
    login_user: "{{ mongodb_admin_user }}"
    login_password: "{{ mongodb_admin_password }}"  
    login_port: 27017
    login_database: "admin"
    eval: "sh.status()"
    transform: "raw"
    mongo_cmd: "auto"
  register: shard_info

- assert:
    that:
      - "'NYC' not in shard_info.transformed_output | string"
      - "'LAX' not in shard_info.transformed_output | string"

- name: Test with bad password
  community.mongodb.mongodb_shard_tag:
    name: "TEST"
    shard: "rs1"
    login_user: '{{ mongodb_admin_user }}'
    login_password: XXXXXXXXXXXX
    state: "present"
  register: mongodb_shard_tag_bad_pw
  ignore_errors: true

- name: Assert login failed
  assert:
    that:
    - mongodb_shard_tag_bad_pw.changed == False
    - "'Authentication failed' in  mongodb_shard_tag_bad_pw.msg"

- include_tasks: mongod_teardown.yml
