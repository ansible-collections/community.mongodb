#################################################################
# This file includes tasks to setup a shared cluster with ssl   #
# certificates. We should test all MongoDB modules in this file.#
#################################################################
- include_tasks: mongod_teardown.yml

- include_tasks: create_ssl_certs.yml

# Create the shared cluster

- name: Create directories for mongod processes
  file:
    path: '{{ remote_tmp_dir }}/mongod{{ item }}'
    state: directory
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_user }}'
    mode: '0755'
    recurse: true
  with_items:
    - ssl0
    - ssl1
    - sslcfg

- name: Spawn mongod process with auth and with SSL - ssl0 3001
  command: mongod --sslMode requireSSL --sslAllowConnectionsWithoutCertificates
    --sslCAFile {{ remote_tmp_dir }}/ca-chain.pem --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem
    --sslAllowInvalidHostnames --shardsvr {{ mongod_storage_engine_opts }}
    --dbpath mongodssl0 --port 3001 --replSet ssl0 --logpath mongodssl0/log.log --fork --auth --keyFile my.key
  args:
    chdir: "{{ remote_tmp_dir }}"


- name: Spawn mongod process with auth and with SSL - ssl1 3004
  command: mongod --sslMode requireSSL --sslAllowConnectionsWithoutCertificates
    --sslCAFile {{ remote_tmp_dir }}/ca-chain.pem --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem
    --sslAllowInvalidHostnames --shardsvr {{ mongod_storage_engine_opts }}
    --dbpath mongodssl1 --port 3004 --replSet ssl1 --logpath mongodssl1/log.log --fork --auth --keyFile my.key
  args:
    chdir: "{{ remote_tmp_dir }}"

- name: Wait for mongod to start responding
  wait_for:
    port: '{{ item }}'
  with_items:
    - 3001
    - 3004

- name: Launch cfg server
  command: mongod --configsvr --port 4000 --dbpath mongodsslcfg --logpath {{ remote_tmp_dir }}/sslcfg.log
    --sslMode requireSSL --sslAllowConnectionsWithoutCertificates --sslCAFile {{ remote_tmp_dir }}/ca-chain.pem
    --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem --sslAllowInvalidHostnames --replSet sslcfg --fork
  args:
    chdir: "{{ remote_tmp_dir }}"

- name: Wait for mongod cfg server to start responding
  wait_for:
    port: '{{ item }}'
  with_items:
    - 4000

- name: Run module with invalid ssl_certfile path
  mongodb_replicaset:
    login_host: localhost
    login_port: "{{ item.port }}"
    login_database: admin
    replica_set: "{{ item.rs }}"
    ssl: yes
    ssl_cert_reqs: CERT_OPTIONAL
    ssl_ca_certs: "{{ remote_tmp_dir }}/ca-chain.pem"
    ssl_certfile: "{{ remote_tmp_dir }}/mongo-client-chain.pem.idonotexist"
    members:
      - "localhost:{{ item.port }}"
    validate: no
  with_items:
    - { "port": 3001, "rs": "ssl0" }
    - { "port": 3004, "rs": "ssl1" }
    - { "port": 4000, "rs": "sslcfg" }
  ignore_errors: yes
  register: ssl_cert_invalid

- assert:
    that:
      - "'No such file or directory' in item.msg"
  with_items:
    - "{{ ssl_cert_invalid.results }}"

#- shell: cat mongodssl0/log.log
#  args:
#    chdir: "{{ remote_tmp_dir }}"

- name: Create replicasets with ssl enabled
  mongodb_replicaset:
    login_host: localhost
    login_port: "{{ item.port }}"
    login_database: admin
    replica_set: "{{ item.rs }}"
    ssl: yes
    ssl_cert_reqs: CERT_OPTIONAL
    ssl_ca_certs: "{{ remote_tmp_dir }}/ca-chain.pem"
    ssl_certfile: "{{ remote_tmp_dir }}/mongo-client-chain.pem"
    members:
      - "localhost:{{ item.port }}"
    validate: no
  with_items:
    - { "port": 3001, "rs": "ssl0" }
    - { "port": 3004, "rs": "ssl1" }
    - { "port": 4000, "rs": "sslcfg" }
  ignore_errors: yes
  register: ssl_cert_invalid

- name: Launch mongos
  shell: mongos --configdb "{{ configsrv_replicaset }}/localhost:4000" --logpath "{{ remote_tmp_dir }}/tests/mongos.log"
    --port 27017 --sslMode requireSSL --sslAllowConnectionsWithoutCertificates
    --sslCAFile {{ remote_tmp_dir }}/ca-chain.pem --sslPEMKeyFile  {{ remote_tmp_dir }}/mongo-chain.pem
    --sslAllowInvalidHostnames --fork &

- pause:
    seconds: 30

- shell: cat "{{ remote_tmp_dir }}/tests/mongos.log"

- name: Wait for mongos server to start responding
  wait_for:
    port: '{{ item }}'
  with_items:
    - 27017

- name: Add shards ssl0 and ssl1
  mongodb_shard:
    login_user: admin
    login_password: admin
    shard: '{{ item.rs }}/localhost:{{ item.port }}'
    state: present
    ssl: yes
    ssl_cert_reqs: CERT_OPTIONAL
    ssl_ca_certs: "{{ remote_tmp_dir }}/ca-chain.pem"
    ssl_certfile: "{{ remote_tmp_dir }}/mongo-client-chain.pem"
  with_items:
    - { "port": 3001, "rs": "ssl0" }
    - { "port": 3004, "rs": "ssl1" }

# TODO Test other modules ssl parameters here
- include_tasks: mongod_teardown.yml
